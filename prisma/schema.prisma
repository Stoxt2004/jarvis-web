// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId   String?
  stripeCurrentPeriodEnd DateTime?
  plan            Plan     @default(FREE)
  status          SubscriptionStatus @default(INACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  INACTIVE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  // Campi aggiuntivi per il profilo utente
  role          Role      @default(USER)
  plan          Plan      @default(FREE)
  preferences   Json?     @default("{}")
  workspaces    Workspace[]
  files         File[]

  Subscription Subscription?

  AIRequestLog AIRequestLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Definizione del ruolo utente
enum Role {
  USER
  ADMIN
}

// Definizione del piano di abbonamento
enum Plan {
  FREE
  PREMIUM
  TEAM
}

// Modello per i workspace dell'utente
model Workspace {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  data        Json     @default("{}")
  isDefault   Boolean  @default(false)
  files       File[]
}

// Modello per i file dell'utente
model File {
  id          String    @id @default(cuid())
  name        String
  type        String    // mime type o tipo personalizzato
  path        String    // percorso relativo
  size        Int       // dimensione in bytes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  parentId    String?   // per supportare cartelle nidificate
  parent      File?     @relation("FileToFile", fields: [parentId], references: [id])
  children    File[]    @relation("FileToFile")
  isPublic    Boolean   @default(false)
  content     String?   @db.Text
}

model AIRequestLog {
  id          String   @id @default(cuid())
  userId      String
  type        String   // tipo di richiesta: "generate", "chat", ecc.
  tokenCount  Int      @default(0)
  successful  Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}