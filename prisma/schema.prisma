// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String         @default("USER")
  plan          String         @default("FREE")
  preferences   Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  files         File[]
  notes         Note[]
  calendars     CalendarEvent[]
  workspaces    Workspace[]
  subscriptions Subscription[]
  aiRequests    AIRequestLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  plan                   String    @default("FREE")
  status                 String    @default("INACTIVE")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  userId    String
  isDefault Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     File[]
  notes     Note[]
  events    CalendarEvent[]
}

model File {
  id          String    @id @default(cuid())
  name        String
  type        String
  size        Int       @default(0)
  path        String
  content     String?   @db.Text
  isPublic    Boolean   @default(false)
  // Nuovi campi per Wasabi
  storageKey  String?
  storageUrl  String?
  parentId    String?
  userId      String
  workspaceId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  parent      File?     @relation("FileToFile", fields: [parentId], references: [id], onDelete: SetNull)
  children    File[]    @relation("FileToFile")
}

model Note {
  id          String    @id @default(cuid())
  title       String
  content     String    @default("")
  color       String?
  isPinned    Boolean   @default(false)
  tags        String[]
  userId      String
  workspaceId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
}

model CalendarEvent {
  id           String    @id @default(cuid())
  title        String
  description  String?
  location     String?
  start        DateTime
  end          DateTime
  reminder     Boolean   @default(false)
  reminderTime Int       @default(15) // minuti prima
  color        String?
  userId       String
  workspaceId  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
}

model AIRequestLog {
  id          String    @id @default(cuid())
  userId      String
  type        String    // chat_completion, code_completion, etc.
  tokenCount  Int
  successful  Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}